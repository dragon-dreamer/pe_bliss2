#pragma once

#include <cstdint>

namespace pe_bliss::detail::resources
{

struct accelerator
{
	std::uint16_t modifier;
	std::uint16_t key_code;
	std::uint32_t message;
};

constexpr std::uint16_t modifier_last_accelerator = 0x80u;
constexpr std::uint16_t modifier_alt = 0x10u;
constexpr std::uint16_t modifier_control = 0x8u;
constexpr std::uint16_t modifier_shift = 0x4u;
constexpr std::uint16_t modifier_virtkey = 0x1u;

constexpr std::uint8_t vk_lbutton = 0x01;
constexpr std::uint8_t vk_rbutton = 0x02;
constexpr std::uint8_t vk_cancel = 0x03;
constexpr std::uint8_t vk_mbutton = 0x04;
constexpr std::uint8_t vk_xbutton1 = 0x05;
constexpr std::uint8_t vk_xbutton2 = 0x06;
constexpr std::uint8_t vk_back = 0x08;
constexpr std::uint8_t vk_tab = 0x09;
constexpr std::uint8_t vk_clear = 0x0c;
constexpr std::uint8_t vk_return = 0x0d;
constexpr std::uint8_t vk_shift = 0x10;
constexpr std::uint8_t vk_control = 0x11;
constexpr std::uint8_t vk_menu = 0x12;
constexpr std::uint8_t vk_pause = 0x13;
constexpr std::uint8_t vk_capital = 0x14;
constexpr std::uint8_t vk_kana = 0x15;
constexpr std::uint8_t vk_ime_on = 0x16;
constexpr std::uint8_t vk_junja = 0x17;
constexpr std::uint8_t vk_final = 0x18;
constexpr std::uint8_t vk_hanja = 0x19;
constexpr std::uint8_t vk_ime_off = 0x1a;
constexpr std::uint8_t vk_escape = 0x1b;
constexpr std::uint8_t vk_convert = 0x1c;
constexpr std::uint8_t vk_nonconvert = 0x1d;
constexpr std::uint8_t vk_accept = 0x1e;
constexpr std::uint8_t vk_modechange = 0x1f;
constexpr std::uint8_t vk_space = 0x20;
constexpr std::uint8_t vk_prior = 0x21;
constexpr std::uint8_t vk_next = 0x22;
constexpr std::uint8_t vk_end = 0x23;
constexpr std::uint8_t vk_home = 0x24;
constexpr std::uint8_t vk_left = 0x25;
constexpr std::uint8_t vk_up = 0x26;
constexpr std::uint8_t vk_right = 0x27;
constexpr std::uint8_t vk_down = 0x28;
constexpr std::uint8_t vk_select = 0x29;
constexpr std::uint8_t vk_print = 0x2a;
constexpr std::uint8_t vk_execute = 0x2b;
constexpr std::uint8_t vk_snapshot = 0x2c;
constexpr std::uint8_t vk_insert = 0x2d;
constexpr std::uint8_t vk_delete = 0x2e;
constexpr std::uint8_t vk_help = 0x2f;
//VK_0 - VK_9 are the same as ASCII '0' - '9' (0x30 - 0x39)
//VK_A - VK_Z are the same as ASCII 'A' - 'Z' (0x41 - 0x5A)
constexpr std::uint8_t vk_lwin = 0x5b;
constexpr std::uint8_t vk_rwin = 0x5c;
constexpr std::uint8_t vk_apps = 0x5d;
constexpr std::uint8_t vk_sleep = 0x5f;
constexpr std::uint8_t vk_numpad0 = 0x60;
constexpr std::uint8_t vk_numpad1 = 0x61;
constexpr std::uint8_t vk_numpad2 = 0x62;
constexpr std::uint8_t vk_numpad3 = 0x63;
constexpr std::uint8_t vk_numpad4 = 0x64;
constexpr std::uint8_t vk_numpad5 = 0x65;
constexpr std::uint8_t vk_numpad6 = 0x66;
constexpr std::uint8_t vk_numpad7 = 0x67;
constexpr std::uint8_t vk_numpad8 = 0x68;
constexpr std::uint8_t vk_numpad9 = 0x69;
constexpr std::uint8_t vk_multiply = 0x6a;
constexpr std::uint8_t vk_add = 0x6b;
constexpr std::uint8_t vk_separator = 0x6c;
constexpr std::uint8_t vk_subtract = 0x6d;
constexpr std::uint8_t vk_decimal = 0x6e;
constexpr std::uint8_t vk_divide = 0x6f;
constexpr std::uint8_t vk_f1 = 0x70;
constexpr std::uint8_t vk_f2 = 0x71;
constexpr std::uint8_t vk_f3 = 0x72;
constexpr std::uint8_t vk_f4 = 0x73;
constexpr std::uint8_t vk_f5 = 0x74;
constexpr std::uint8_t vk_f6 = 0x75;
constexpr std::uint8_t vk_f7 = 0x76;
constexpr std::uint8_t vk_f8 = 0x77;
constexpr std::uint8_t vk_f9 = 0x78;
constexpr std::uint8_t vk_f10 = 0x79;
constexpr std::uint8_t vk_f11 = 0x7a;
constexpr std::uint8_t vk_f12 = 0x7b;
constexpr std::uint8_t vk_f13 = 0x7c;
constexpr std::uint8_t vk_f14 = 0x7d;
constexpr std::uint8_t vk_f15 = 0x7e;
constexpr std::uint8_t vk_f16 = 0x7f;
constexpr std::uint8_t vk_f17 = 0x80;
constexpr std::uint8_t vk_f18 = 0x81;
constexpr std::uint8_t vk_f19 = 0x82;
constexpr std::uint8_t vk_f20 = 0x83;
constexpr std::uint8_t vk_f21 = 0x84;
constexpr std::uint8_t vk_f22 = 0x85;
constexpr std::uint8_t vk_f23 = 0x86;
constexpr std::uint8_t vk_f24 = 0x87;
constexpr std::uint8_t vk_navigation_view = 0x88;
constexpr std::uint8_t vk_navigation_menu = 0x89;
constexpr std::uint8_t vk_navigation_up = 0x8a;
constexpr std::uint8_t vk_navigation_down = 0x8b;
constexpr std::uint8_t vk_navigation_left = 0x8c;
constexpr std::uint8_t vk_navigation_right = 0x8d;
constexpr std::uint8_t vk_navigation_accept = 0x8e;
constexpr std::uint8_t vk_navigation_cancel = 0x8f;
constexpr std::uint8_t vk_numlock = 0x90;
constexpr std::uint8_t vk_scroll = 0x91;
constexpr std::uint8_t vk_oem_fj_jisho = 0x92; //'Dictionary' key
constexpr std::uint8_t vk_oem_fj_masshou = 0x93; //'Unregister word' key
constexpr std::uint8_t vk_oem_fj_touroku = 0x94; //'Register word' key
constexpr std::uint8_t vk_oem_fj_loya = 0x95; //'Left OYAYUBI' key
constexpr std::uint8_t vk_oem_fj_roya = 0x96; //'Right OYAYUBI' key
constexpr std::uint8_t vk_lshift = 0xa0;
constexpr std::uint8_t vk_rshift = 0xa1;
constexpr std::uint8_t vk_lcontrol = 0xa2;
constexpr std::uint8_t vk_rcontrol = 0xa3;
constexpr std::uint8_t vk_lmenu = 0xa4;
constexpr std::uint8_t vk_rmenu = 0xa5;
constexpr std::uint8_t vk_browser_back = 0xa6;
constexpr std::uint8_t vk_browser_forward = 0xa7;
constexpr std::uint8_t vk_browser_refresh = 0xa8;
constexpr std::uint8_t vk_browser_stop = 0xa9;
constexpr std::uint8_t vk_browser_search = 0xaa;
constexpr std::uint8_t vk_browser_favorites = 0xab;
constexpr std::uint8_t vk_browser_home = 0xac;
constexpr std::uint8_t vk_volume_mute = 0xad;
constexpr std::uint8_t vk_volume_down = 0xae;
constexpr std::uint8_t vk_volume_up = 0xaf;
constexpr std::uint8_t vk_media_next_track = 0xb0;
constexpr std::uint8_t vk_media_prev_track = 0xb1;
constexpr std::uint8_t vk_media_stop = 0xb2;
constexpr std::uint8_t vk_media_play_pause = 0xb3;
constexpr std::uint8_t vk_launch_mail = 0xb4;
constexpr std::uint8_t vk_launch_media_select = 0xb5;
constexpr std::uint8_t vk_launch_app1 = 0xb6;
constexpr std::uint8_t vk_launch_app2 = 0xb7;
constexpr std::uint8_t vk_oem_1 = 0xba; //';:' for US
constexpr std::uint8_t vk_oem_plus = 0xbb; //'+' any country
constexpr std::uint8_t vk_oem_comma = 0xbc; //',' any country
constexpr std::uint8_t vk_oem_minus = 0xbd; //'-' any country
constexpr std::uint8_t vk_oem_period = 0xbe; //'.' any country
constexpr std::uint8_t vk_oem_2 = 0xbf; //'/?' for US
constexpr std::uint8_t vk_oem_3 = 0xc0; //'`~' for US
constexpr std::uint8_t vk_gamepad_a = 0xc3;
constexpr std::uint8_t vk_gamepad_b = 0xc4;
constexpr std::uint8_t vk_gamepad_x = 0xc5;
constexpr std::uint8_t vk_gamepad_y = 0xc6;
constexpr std::uint8_t vk_gamepad_right_shoulder = 0xc7;
constexpr std::uint8_t vk_gamepad_left_shoulder = 0xc8;
constexpr std::uint8_t vk_gamepad_left_trigger = 0xc9;
constexpr std::uint8_t vk_gamepad_right_trigger = 0xca;
constexpr std::uint8_t vk_gamepad_dpad_up = 0xcb;
constexpr std::uint8_t vk_gamepad_dpad_down = 0xcc;
constexpr std::uint8_t vk_gamepad_dpad_left = 0xcd;
constexpr std::uint8_t vk_gamepad_dpad_right = 0xce;
constexpr std::uint8_t vk_gamepad_menu = 0xcf;
constexpr std::uint8_t vk_gamepad_view = 0xd0;
constexpr std::uint8_t vk_gamepad_left_thumbstick_button = 0xd1;
constexpr std::uint8_t vk_gamepad_right_thumbstick_button = 0xd2;
constexpr std::uint8_t vk_gamepad_left_thumbstick_up = 0xd3;
constexpr std::uint8_t vk_gamepad_left_thumbstick_down = 0xd4;
constexpr std::uint8_t vk_gamepad_left_thumbstick_right = 0xd5;
constexpr std::uint8_t vk_gamepad_left_thumbstick_left = 0xd6;
constexpr std::uint8_t vk_gamepad_right_thumbstick_up = 0xd7;
constexpr std::uint8_t vk_gamepad_right_thumbstick_down = 0xd8;
constexpr std::uint8_t vk_gamepad_right_thumbstick_right = 0xd9;
constexpr std::uint8_t vk_gamepad_right_thumbstick_left = 0xda;
constexpr std::uint8_t vk_oem_4 = 0xdb; //'[{' for US
constexpr std::uint8_t vk_oem_5 = 0xdc; //'\|' for US
constexpr std::uint8_t vk_oem_6 = 0xdd; //']}' for US
constexpr std::uint8_t vk_oem_7 = 0xde; //''"' for US
constexpr std::uint8_t vk_oem_8 = 0xdf;
constexpr std::uint8_t vk_oem_ax = 0xe1; //'AX' key on Japanese AX kbd
constexpr std::uint8_t vk_oem_102 = 0xe2; //"<>" or "\|" on RT 102-key kbd.
constexpr std::uint8_t vk_ico_help = 0xe3; //Help key on ICO
constexpr std::uint8_t vk_ico_00 = 0xe4; //00 key on ICO
constexpr std::uint8_t vk_processkey = 0xe5;
constexpr std::uint8_t vk_ico_clear = 0xe6;
constexpr std::uint8_t vk_packet = 0xe7;
constexpr std::uint8_t vk_oem_reset = 0xe9;
constexpr std::uint8_t vk_oem_jump = 0xea;
constexpr std::uint8_t vk_oem_pa1 = 0xeb;
constexpr std::uint8_t vk_oem_pa2 = 0xec;
constexpr std::uint8_t vk_oem_pa3 = 0xed;
constexpr std::uint8_t vk_oem_wsctrl = 0xee;
constexpr std::uint8_t vk_oem_cusel = 0xef;
constexpr std::uint8_t vk_oem_attn = 0xf0;
constexpr std::uint8_t vk_oem_finish = 0xf1;
constexpr std::uint8_t vk_oem_copy = 0xf2;
constexpr std::uint8_t vk_oem_auto = 0xf3;
constexpr std::uint8_t vk_oem_enlw = 0xf4;
constexpr std::uint8_t vk_oem_backtab = 0xf5;
constexpr std::uint8_t vk_attn = 0xf6;
constexpr std::uint8_t vk_crsel = 0xf7;
constexpr std::uint8_t vk_exsel = 0xf8;
constexpr std::uint8_t vk_ereof = 0xf9;
constexpr std::uint8_t vk_play = 0xfa;
constexpr std::uint8_t vk_zoom = 0xfb;
constexpr std::uint8_t vk_noname = 0xfc;
constexpr std::uint8_t vk_pa1 = 0xfd;
constexpr std::uint8_t vk_oem_clear = 0xfe;

} //namespace pe_bliss::detail::resources
